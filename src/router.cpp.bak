#include <libconfig.h++>
#include "zhelpers.hpp"


// TODO: convert to zmqpp
int main (int argc, char *argv[]) {
    //  Prepare our context and sockets
    zmq::context_t context(1);
    zmq::socket_t frontend(context, ZMQ_ROUTER);
    zmq::socket_t backend(context, ZMQ_DEALER);

    libconfig::Config conf;
    conf.readFile("db.conf");

    const libconfig::Setting& root = conf.getRoot();

    std::string masterPort = root["MASTER_PORT"];
    std::string frontendpoint = "tcp://*:" + masterPort;

    std::string slavePort = root["SLAVE_PORT"];
    std::string backendpoint = "tcp://*:" + slavePort;

    frontend.bind(frontendpoint.c_str());
    backend.bind(backendpoint.c_str());

    //  Initialize poll set
    zmq::pollitem_t items[] = {
        { frontend, 0, ZMQ_POLLIN, 0 },
        { backend,  0, ZMQ_POLLIN, 0 }
    };

    //  Switch messages between sockets
    while(true) {
        zmq::message_t message;
        int more = 1;               //  Multipart detection

        zmq::poll(&items[0], 2, -1);

        if(items[0].revents & ZMQ_POLLIN) {
            while(more) {
                //  Process all parts of the message
                frontend.recv(&message);
                size_t more_size = sizeof(more);
                frontend.getsockopt(ZMQ_RCVMORE, &more, &more_size);
                backend.send(message, more? ZMQ_SNDMORE: 0);
            }
        }

        more = 1;
        if(items[1].revents & ZMQ_POLLIN) {
            while(more) {
                //  Process all parts of the message
                backend.recv(&message);
                size_t more_size = sizeof (more);
                backend.getsockopt(ZMQ_RCVMORE, &more, &more_size);
                frontend.send(message, more? ZMQ_SNDMORE: 0);
            }
        }
    }

    return 0;
}
